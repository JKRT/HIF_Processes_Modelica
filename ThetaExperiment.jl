begin
    begin
        import ModelingToolkit
        MTK = ModelingToolkit
    end
    struct SystemInfo
        system::Any
        initialValues::Any
        parameterMap::Any
        equations::Any
        variables::Any
        parameters::Any
        irreductibles::Any
    end
    function system()
        MTK.@variables t        #= C:\Users\johti17\OneDrive - Linköpings universitet\Projects\HIFCLEAN\HIF_Processes_Modelica\hifProcessesTest.jl:206 =#
        DER = Differential(t)
        pars = MTK.@parameters((
            stepCurrent_I,
            stepCurrent_offset,
            stepCurrent_startTime,
            stepCurrent_signalSource_height,
            stepCurrent_signalSource_offset,
            stepCurrent_signalSource_startTime,
            C1_C,
            R1_R,
            R1_T_ref,
            R1_alpha,
            R1_useHeatPort,
            R1_T,
            D1_Ids,
            D1_Vt,
            D1_Maxexp,
            D1_R,
            D1_useHeatPort,
            D1_T,
            D2_Ids,
            D2_Vt,
            D2_Maxexp,
            D2_R,
            D2_useHeatPort,
            D2_T,
            D3_Ids,
            D3_Vt,
            D3_Maxexp,
            D3_R,
            D3_useHeatPort,
            D3_T,
            diode_Ids,
            diode_Vt,
            diode_Maxexp,
            diode_R,
            diode_useHeatPort,
            diode_T,
            Cp_C,
        )) #= C:\Users\johti17\OneDrive - Linköpings universitet\Projects\HIFCLEAN\HIF_Processes_Modelica\hifProcessesTest.jl:208 =#
        vars = MTK.@variables((
            ifCond1(t),
            ifCond2(t),
            ifCond3(t),
            ifCond4(t),
            ifCond5(t),
            C1_v(t),
            Cp_v(t),
            THETA(t),
            ground_p_v(t),
            ground_p_i(t),
            stepCurrent_v(t),
            stepCurrent_i(t),
            stepCurrent_p_v(t),
            stepCurrent_p_i(t),
            stepCurrent_n_v(t),
            stepCurrent_n_i(t),
            stepCurrent_signalSource_y(t),
            C1_i(t),
            C1_p_v(t),
            C1_p_i(t),
            C1_n_v(t),
            C1_n_i(t),
            R1_v(t),
            R1_i(t),
            R1_p_v(t),
            R1_p_i(t),
            R1_n_v(t),
            R1_n_i(t),
            R1_LossPower(t),
            R1_T_heatPort(t),
            R1_R_actual(t),
            D1_v(t),
            D1_i(t),
            D1_p_v(t),
            D1_p_i(t),
            D1_n_v(t),
            D1_n_i(t),
            D1_LossPower(t),
            D1_T_heatPort(t),
            D2_v(t),
            D2_i(t),
            D2_p_v(t),
            D2_p_i(t),
            D2_n_v(t),
            D2_n_i(t),
            D2_LossPower(t),
            D2_T_heatPort(t),
            D3_v(t),
            D3_i(t),
            D3_p_v(t),
            D3_p_i(t),
            D3_n_v(t),
            D3_n_i(t),
            D3_LossPower(t),
            D3_T_heatPort(t),
            diode_v(t),
            diode_i(t),
            diode_p_v(t),
            diode_p_i(t),
            diode_n_v(t),
            diode_n_i(t),
            diode_LossPower(t),
            diode_T_heatPort(t),
            Cp_i(t),
            Cp_p_v(t),
            Cp_p_i(t),
            Cp_n_v(t),
            Cp_n_i(t),
            ifEq_tmp53(t),
            ifEq_tmp35(t),
            ifEq_tmp18(t),
            ifEq_tmp41(t),
            ifEq_tmp47(t),
        )) #= C:\Users\johti17\OneDrive - Linköpings universitet\Projects\HIFCLEAN\HIF_Processes_Modelica\hifProcessesTest.jl:209 =#
        initialValues = Pair{Num,Float64}[
            ifCond1=>0.0,
            ifCond2=>0.0,
            ifCond3=>0.0,
            ifCond4=>0.0,
            ifCond5=>0.0,
            THETA=>0.0,
            ground_p_v=>0.0,
            ground_p_i=>0.0,
            stepCurrent_v=>0.0,
            stepCurrent_i=>0.0,
            stepCurrent_p_v=>0.0,
            stepCurrent_p_i=>0.0,
            stepCurrent_n_v=>0.0,
            stepCurrent_n_i=>0.0,
            stepCurrent_signalSource_y=>0.0,
            C1_i=>0.0,
            C1_p_v=>0.0,
            C1_p_i=>0.0,
            C1_n_v=>0.0,
            C1_n_i=>0.0,
            R1_v=>0.0,
            R1_i=>0.0,
            R1_p_v=>0.0,
            R1_p_i=>0.0,
            R1_n_v=>0.0,
            R1_n_i=>0.0,
            R1_LossPower=>0.0,
            R1_T_heatPort=>288.15,
            R1_R_actual=>0.0,
            D1_v=>0.0,
            D1_i=>0.0,
            D1_p_v=>0.0,
            D1_p_i=>0.0,
            D1_n_v=>0.0,
            D1_n_i=>0.0,
            D1_LossPower=>0.0,
            D1_T_heatPort=>288.15,
            D2_v=>0.0,
            D2_i=>0.0,
            D2_p_v=>0.0,
            D2_p_i=>0.0,
            D2_n_v=>0.0,
            D2_n_i=>0.0,
            D2_LossPower=>0.0,
            D2_T_heatPort=>288.15,
            D3_v=>0.0,
            D3_i=>0.0,
            D3_p_v=>0.0,
            D3_p_i=>0.0,
            D3_n_v=>0.0,
            D3_n_i=>0.0,
            D3_LossPower=>0.0,
            D3_T_heatPort=>288.15,
            diode_v=>0.0,
            diode_i=>0.0,
            diode_p_v=>0.0,
            diode_p_i=>0.0,
            diode_n_v=>0.0,
            diode_n_i=>0.0,
            diode_LossPower=>0.0,
            diode_T_heatPort=>288.15,
            Cp_i=>0.0,
            Cp_p_v=>0.0,
            Cp_p_i=>0.0,
            Cp_n_v=>0.0,
            Cp_n_i=>0.0,
            ifEq_tmp53=>0.0,
            ifEq_tmp35=>0.0,
            ifEq_tmp18=>0.0,
            ifEq_tmp41=>0.0,
            ifEq_tmp47=>0.0,
            C1_v=>0.0,
            Cp_v=>0.0,
        ]
        parameterMap = Dict{Num,Real}(
            D3_T => 293.15,
            R1_R => 1000.0,
            R1_T_ref => 300.15,
            D1_Vt => 0.04,
            diode_Maxexp => 40.0,
            diode_T => 293.15,
            diode_useHeatPort => 0.0,
            C1_C => 0.0001000000000000001,
            stepCurrent_signalSource_offset => stepCurrent_offset,
            D3_Maxexp => 40.0,
            D3_Vt => 0.04,
            Cp_C => 1.0e-12THETA,
            D2_Ids => 1.0e-9,
            D3_R => 1.0e8,
            R1_T => R1_T_ref,
            D1_T => 293.15,
            D2_useHeatPort => 0.0,
            diode_R => 1.0e8,
            stepCurrent_I => 1.0,
            stepCurrent_signalSource_height => stepCurrent_I,
            D2_Vt => 0.04,
            D3_useHeatPort => 0.0,
            diode_Ids => 1.0e-9,
            stepCurrent_offset => 0.0,
            D1_Ids => 1.0e-9,
            D1_R => 1.0e8,
            D2_R => 1.0e8,
            D1_Maxexp => 40.0,
            D2_T => 293.15,
            stepCurrent_signalSource_startTime => stepCurrent_startTime,
            stepCurrent_startTime => 0.0,
            diode_Vt => 0.04,
            D1_useHeatPort => 0.0,
            R1_useHeatPort => 0.0,
            D2_Maxexp => 40.0,
            D3_Ids => 1.0e-9,
            R1_alpha => 0.0,
        )
        println("Marking irreductibles...")
        for var in vars
            varStr = replace(string(var), "(t)" => "")
            eval(:($(Symbol(varStr)) = $var))
        end
        for sym in [
            :diode_v,
            :diode_v,
            :ifEq_tmp53,
            :diode_v,
            :ifEq_tmp53,
            :D1_v,
            :D1_v,
            :ifEq_tmp35,
            :D1_v,
            :ifEq_tmp35,
            :ifEq_tmp18,
            :ifEq_tmp18,
            :D2_v,
            :D2_v,
            :ifEq_tmp41,
            :D2_v,
            :ifEq_tmp41,
            :D3_v,
            :D3_v,
            :ifEq_tmp47,
            :D3_v,
            :ifEq_tmp47,
            :THETA,
            :THETA,
        ]
            eval(
                :(
                    $sym = SymbolicUtils.setmetadata(
                        $sym,
                        ModelingToolkit.VariableIrreducible,
                        true,
                    )
                ),
            )
        end
        println("Variables done")
        equations = Symbolics.Equation[
            0~R1_n_v-ground_p_v,
            0~R1_n_v-Cp_n_v,
            0~R1_n_v-C1_n_v,
            0~R1_n_v-stepCurrent_p_v,
            0~diode_n_v-Cp_p_v,
            0~diode_n_v-R1_p_v,
            0~D1_p_v-stepCurrent_n_v,
            0~D1_p_v-C1_p_v,
            0~D1_p_v-D2_n_v,
            0~D3_p_v-D2_p_v,
            0~D3_p_v-D1_n_v,
            0~D3_n_v-diode_p_v,
            0~C1_p_i+D1_p_i+D2_n_i+stepCurrent_n_i,
            0~D1_n_i+D2_p_i+D3_p_i,
            0~D3_n_i+diode_p_i,
            0~Cp_p_i+R1_p_i+diode_n_i,
            0~C1_n_i+Cp_n_i+R1_n_i+ground_p_i+stepCurrent_p_i,
            0~ground_p_v,
            0~stepCurrent_signalSource_y-ifEq_tmp18,
            0~stepCurrent_i-stepCurrent_signalSource_y,
            0~(stepCurrent_n_v+stepCurrent_v)-stepCurrent_p_v,
            0~-stepCurrent_n_i-stepCurrent_p_i,
            0~stepCurrent_i-stepCurrent_p_i,
            DER(C1_v)~9999.99999999999C1_i,
            0~(C1_n_v+C1_v)-C1_p_v,
            0~-C1_n_i-C1_p_i,
            0~C1_i-C1_p_i,
            0~R1_R_actual-1000.0,
            0~R1_v-R1_R_actual*R1_i,
            0~R1_LossPower-R1_i*R1_v,
            0~R1_T_heatPort-300.15,
            0~(R1_n_v+R1_v)-R1_p_v,
            0~-R1_n_i-R1_p_i,
            0~R1_i-R1_p_i,
            0~(D1_i-1.0e-9*(ifEq_tmp35-1.0))-1.0e-8D1_v,
            0~D1_LossPower-D1_i*D1_v,
            0~D1_T_heatPort-293.15,
            0~(D1_n_v+D1_v)-D1_p_v,
            0~-D1_n_i-D1_p_i,
            0~D1_i-D1_p_i,
            0~(D2_i-1.0e-9*(ifEq_tmp41-1.0))-1.0e-8D2_v,
            0~D2_LossPower-D2_i*D2_v,
            0~D2_T_heatPort-293.15,
            0~(D2_n_v+D2_v)-D2_p_v,
            0~-D2_n_i-D2_p_i,
            0~D2_i-D2_p_i,
            0~(D3_i-1.0e-9*(ifEq_tmp47-1.0))-1.0e-8D3_v,
            0~D3_LossPower-D3_i*D3_v,
            0~D3_T_heatPort-293.15,
            0~(D3_n_v+D3_v)-D3_p_v,
            0~-D3_n_i-D3_p_i,
            0~D3_i-D3_p_i,
            0~(diode_i-1.0e-9*(ifEq_tmp53-1.0))-1.0e-8diode_v,
            0~diode_LossPower-diode_i*diode_v,
            0~diode_T_heatPort-293.15,
            0~(diode_n_v+diode_v)-diode_p_v,
            0~-diode_n_i-diode_p_i,
            0~diode_i-diode_p_i,
            DER(Cp_v)~Cp_i/(1.0e-12THETA),
            0~(Cp_n_v+Cp_v)-Cp_p_v,
            0~-Cp_n_i-Cp_p_i,
            0~Cp_i-Cp_p_i,
            0~THETA-1.0,
            DER(ifCond1)~0.0,
            DER(ifCond2)~0.0,
            DER(ifCond3)~0.0,
            DER(ifCond4)~0.0,
            DER(ifCond5)~0.0,
            0~ifelse(
                ifCond1 == true,
                2.3538526683702e17 * (25.0diode_v - 39.0),
                exp(25.0diode_v),
            )-ifEq_tmp53,
            0~ifelse(
                ifCond2 == true,
                2.3538526683702e17 * (25.0D1_v - 39.0),
                exp(25.0D1_v),
            )-ifEq_tmp35,
            0~ifelse(ifCond3 == true, 0.0, 1.0)-ifEq_tmp18,
            0~ifelse(
                ifCond4 == true,
                2.3538526683702e17 * (25.0D2_v - 39.0),
                exp(25.0D2_v),
            )-ifEq_tmp41,
            0~ifelse(
                ifCond5 == true,
                2.3538526683702e17 * (25.0D3_v - 39.0),
                exp(25.0D3_v),
            )-ifEq_tmp47,
        ]
        system = MTK.ODESystem(equations, t, vars, pars; name = :($(Symbol("modelName"))))
        return SystemInfo(
            system,
            initialValues,
            parameterMap,
            equations,
            vars,
            pars,
            [
                :diode_v,
                :diode_v,
                :ifEq_tmp53,
                :diode_v,
                :ifEq_tmp53,
                :D1_v,
                :D1_v,
                :ifEq_tmp35,
                :D1_v,
                :ifEq_tmp35,
                :ifEq_tmp18,
                :ifEq_tmp18,
                :D2_v,
                :D2_v,
                :ifEq_tmp41,
                :D2_v,
                :ifEq_tmp41,
                :D3_v,
                :D3_v,
                :ifEq_tmp47,
                :D3_v,
                :ifEq_tmp47,
                :THETA,
                :THETA,
            ],
        )
    end
end